struct vertex_outputs
{
	float4 position : POSITION;
	float3 normal : TEXCOORD0;
	float3 world_position : TEXCOORD1;
};

vertex_outputs
vertex_main(
	in float4 position : POSITION,
	in float4 normal : NORMAL,
	uniform float4x4 mvp)
{
	vertex_outputs outs;

	outs.position =
		mul(
			mvp,
			float4(
				position.xyz,
				1.0));

	outs.world_position =
		position.xyz;

	outs.normal =
		normalize(
			normal.xyz);

	return
		outs;
}

float4
pixel_main(
	vertex_outputs vertex_data,
	uniform float3 sun_direction,
	uniform float texture_repeats,
	uniform sampler2D steep_texture,
	uniform sampler2D flat_texture)
	: COLOR
{
	// NOTE: Is already normalized.
	float3 normal_vector =
		-vertex_data.normal;

	float3
		blend_weights =
			(abs(normal_vector) - 0.2) * 7.0;

	blend_weights =
		max(
			blend_weights,
			0.0);

	float blend_sum =
		blend_weights.x + blend_weights.y + blend_weights.z;

	blend_weights /=
		blend_sum.xxx;

	const float repeats =
		1.0/4.0;

	float2
		coord1 =
			vertex_data.world_position.yz * repeats,
		coord2 =
			vertex_data.world_position.zx * repeats,
		coord3 =
			vertex_data.world_position.xy * repeats;

	float4
		col1 =
			tex2D(
				steep_texture,
				coord1),
		col2 =
			tex2D(
				flat_texture,
				coord2),
		col3 =
			tex2D(
				steep_texture,
				coord3);

	float4 blended_color =
		col1 * blend_weights.x +
		col2 * blend_weights.y +
		col3 * blend_weights.z;

	return
		blended_color;
	/*
	float
		ambient =
			0.5,
		intensity =
			ambient +
			max(
				0.0,
				dot(
					normal_vector,
					-sun_direction));
					*/

	/*
	float4 snow_value =
		texture(
			snow_volume_texture,
			texture_repeats * normalized_position);

	frag_color =
		intensity *
		float4(
			snow_value.xyz,
			1.0);
			*/
}
