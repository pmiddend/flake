struct vertex_outputs
{
	float4 position : POSITION;
	float3 world_position : COLOR0;
};

vertex_outputs
vertex_main(
	in float3 position : POSITION,
	uniform float slice_width,
	uniform float4x4 mvp)
{
	vertex_outputs outs;

	float3 real_position =
		(position + 1.0)/2.0 * slice_width;

	outs.position =
		mul(
			mvp,
			float4(
				real_position,
				1.0));

	outs.world_position =
		real_position;

	return
		outs;
}

float
flat_volume_texture_value(
	uniform sampler2D t,
	int slice_width,
	int elements_per_row,
	float2 texture_size,
	float x,
	float y,
	int z)
{
	int
		top =
			slice_width * (z / elements_per_row),
		left =
			slice_width * (z % elements_per_row);

	return
		tex2D(
			t,
			float2(
				(float(left) + x)/texture_size.x,
				(float(top) + y)/texture_size.y)).r;
}

float
interpolated_flat_volume_texture_value(
	uniform sampler2D t,
	int slice_width,
	int elements_per_row,
	float2 texture_size,
	float3 p)
{
	int discrete_z =
		(int)p.z;

	float
		first_value =
			flat_volume_texture_value(
				t,
				slice_width,
				elements_per_row,
				texture_size,
				p.x,
				p.y,
				discrete_z),
		second_value =
			flat_volume_texture_value(
				t,
				slice_width,
				elements_per_row,
				texture_size,
				p.x,
				p.y,
				min(
					discrete_z+1,
					slice_width-1)),
		interpolated =
			lerp(
				first_value,
				second_value,
				fract(
					p.z));

	return
		interpolated + 1.0;
}

float4
pixel_main(
	vertex_outputs vertex_data,
	uniform int slice_width,
	uniform int elements_per_row,
	uniform float step_size,
	uniform float3 camera_position,
	uniform float2 texture_size,
	uniform float camera_is_inside_cube,
	uniform sampler2D density_texture)
	: COLOR
{
	// Hauptdiagonale des Würfels ist die längste mögliche Strecke
	int maximum_steps =
		int(
			sqrt(
				3.0 *
				(float)slice_width *
				(float)slice_width) /
			step_size);

	// höhere Werte ~= höhere Dichte
	float opacity =
		0.5;

	float3 direction =
		normalize(
			vertex_data.world_position -
			camera_position);

	// scaling density for uniform cloud data
	float density =
		step_size *
		opacity;

	float3 position =
		lerp(
			vertex_data.world_position,
			camera_position,
			camera_is_inside_cube);

	float dst =
		0.0;

	for(
		int i = 0;
		i < maximum_steps;
		i++)
	{
		float interpolated =
			interpolated_flat_volume_texture_value(
				density_texture,
				slice_width,
				elements_per_row,
				texture_size,
				position);

		dst +=
			(1.0 - dst) *
			density *
			interpolated;

		position +=
			direction * step_size;

		// ray termination - threshold
		if(dst > 0.90)
			break;

		if(
			any(
				position < float3(0.0,0.0,0.0)) ||
			any(
				position > slice_width.xxx))
			break;
	}

	return
		float4(1.0,1.0,1.0,dst);
}
