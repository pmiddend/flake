struct vertex_outputs
{
	float4 position : POSITION;
	float3 normal : TEXCOORD0;
	float3 world_position : TEXCOORD1;
};

vertex_outputs
vertex_main(
	in float4 position : POSITION,
	in float4 normal : $0$,
	uniform float4x4 mvp)
{
	vertex_outputs outs;

	outs.position =
		mul(
			mvp,
			float4(
				position.xyz,
				1.0));

	outs.world_position =
		position.xyz;

	float normal_length =
		length(
			normal.xyz);

	if(normal_length < 0.00001 || normal_length > 2.0)
		outs.normal = float3(1.0,0.0,0.0);
	else
		outs.normal =
			normal / normal_length;

	return
		outs;
}

float3
calculate_blend_weights(
	float3 normal_vector)
{
	float3
		blend_weights =
			max(
				(abs(normal_vector) - 0.2) * 7.0,
				0.0);

	float blend_sum =
		blend_weights.x + blend_weights.y + blend_weights.z;

	if(blend_sum < 0.001)
		return float3(1.0,0.0,0.0);

	blend_weights /=
		blend_sum.xxx;

	return
		blend_weights;
}

float4
calculate_blended_color(
	float3 blend_weights,
	float3 world_position,
	uniform sampler2D steep_texture,
	uniform sampler2D flat_texture)
{
	const float repeats =
		1.0/4.0;

	float2
		coord1 =
			world_position.yz * repeats,
		coord2 =
			world_position.zx * repeats,
		coord3 =
			world_position.xy * repeats;

	float4
		col1 =
			tex2D(
				steep_texture,
				coord1),
		col2 =
			tex2D(
				flat_texture,
				coord2),
		col3 =
			tex2D(
				steep_texture,
				coord3);

	return
		col1 * blend_weights.x +
		col2 * blend_weights.y +
		col3 * blend_weights.z;
}

float
calculate_light_intensity(
	float3 normal_vector,
	float3 sun_direction)
{
	const float ambient =
		0.5;

	return
		ambient +
		max(
			0.0,
			dot(
				normal_vector,
				-sun_direction));
}

float4
pixel_main(
	vertex_outputs vertex_data,
	uniform float3 sun_direction,
	uniform float texture_repeats,
	uniform sampler2D steep_texture,
	uniform sampler2D flat_texture)
	: COLOR
{
	// NOTE: Is already normalized.
	float3 normal_vector =
		-vertex_data.normal;

	float4
		blended_color =
			calculate_blended_color(
				calculate_blend_weights(
					normal_vector),
				vertex_data.world_position,
				steep_texture,
				flat_texture);

	float intensity =
		calculate_light_intensity(
			normal_vector,
			sun_direction);

	return
		float4(
			intensity * blended_color.xyz,
			1.0);
}
